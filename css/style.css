/* 
* Índice
* 0.0 - Reset
* 1.0 - Mobile First
* 2.0 - Fonts
* 3.0 - Globais
* 4.0 - Color Palette
* 5.0 - Header
* 6.0 - Body
*   6.1 - Sliders
*   6.2 - Imagery
* 7.0 - Footer
*/


/*** 0.0 - Reset ***/
* {
    box-sizing: border-box;
    border: 0;
    margin: 0;
    padding: 0;
}



/*** 1.0 - Mobile First ***/

@media (max-width:1281px) { body {background-color: rgb(141, 141, 202);}}


/*** 2.0 - Fonts ***/
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital@1&display=swap');


/*** 3.0 - Globais ***/


/*** 4.0 - Color Palette ***/


/*** 5.0 - Header ***/


/*** 6.0 - Body ***/

body {
    font-family: 'Open Sans', sans-serif;
    font-size: 0.95em;
    color:#4B4A54 ;
    background-color: #A3CFCD;
    
}

.container {
    
    width: 60%;
    height: 100%;
    background-color: white;
    /* border: 1px solid rgb(17, 1, 1); */
   

   /* 4 elementos para centralizar uma div de forma Horizontal e Vertical */
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

.menu{
  background-color: white;
  width: 23%;
  height: 100%;
  left: auto;
  position: absolute;
  padding: 15px 0px 0px 30px;
  border-right: 1px solid #4B4A54;
}

.pages {
  background-color: white;
  width: 77%;
  height: 100%;
  left: 23%;
  position: absolute;
  overflow: auto;
  padding: 30px 15px 0px 20px;
}

p.menu2 {
  white-space: pre-line;
}



div.card {
  width: 98%;
  height: 300px;
  border-bottom : 1px solid black;
  text-align: left;
  padding: 5px;
  
  
}

span.imagefake { 
  width: 100%;
  height: 150px;
  display: block;
  text-align: left;
  border: 1px solid none;
  background-color: rgb(211, 208, 214);
  color: white;
  float: left;
  margin-bottom: 5px;

}

span.stack {
  border: 1px solid rgb(0, 140, 255);
  border-radius: 3px;
  padding: 2px;
  font-size: 12px;
}


p.card2 {white-space: pre-line;}

ol {
  list-style-type: none;
  margin: 0;
  padding: 0;
  }

ul {
  
    list-style-type: none;
    margin: 0;
    padding: 0;
    width: 150px;
    
}

li {
  padding: 3px 2px;
}

li a {
  display: block;
  text-decoration: none;
  color:#4B4A54;
}

li a.active {
  background-color: #4CAF50;
  color: white;
}

li a:hover:not(.active) {
  background-color: #555;
  color: white;
}

.button {
background-color: white;
color: #4B4A54;
border: 1px solid;
border-radius: 4px;
padding: 10px 50px;
text-align: center;
text-decoration: none;
display: inline-block;
font-size: 10px;
cursor: pointer;

}

input {
  border: 1px solid #4B4A54;
  width: 100%;
  padding: 12px 20px;
  box-sizing: border-box;
  border-radius: 4px;
  margin-top: 5px;
}

.textarea {
  width: 100%;
  height: 250px;
  padding: 12px 20px;
  box-sizing: border-box;
  border: 1px solid #4B4A54;
  border-radius: 4px;
  background-color: #f8f8f8;
  resize: none;
  margin: 5px 0px;
  
}

/*** 7.0 - Footer ***/




/*------------------------------------------------------------------*/


/* BEM - Bloco, Elemento e Modificador  

# Blocos são componentes independentes, reutilizáveis e geralmente 
maiores de uma página da web. Eles podem ter modificadores e conter 
elementos.
Podemos contar partes maiores em uma página da web como 
<header>, <nav>, <section>, <form>, <article>, <footer> 
como exemplos de blocos.

A barra de navegação do Youtube web pode ser usado como bloco 
e ser declarado como: 

.youtube-header


# Elementos são filhos de blocos. Um elemento pode ter apenas 1 bloco 
pai e não pode ser usado independentemente fora desse bloco.

A nomenclatura de um elemento deve começar com seu nome de bloco pai, 
2 sublinhados depois dele e terminar com seu próprio nome:


<header class = " youtube-header ">
   <img class = " youtube-header__logo " />
   <div class = " youtube-header__search "> </div>
    <ul class = " youtube-header__list ">
    <li class = " youtube-header__item > </li>
    <li class = " youtube-header__item > </li>
</ul>
</header>

-------------------------------------------------------------------

Dica 1:
Como youtube-header é o bloco, a convenção de nomenclatura de seus 
elementos pode ser escrita assim:

.youtube-header__logo { 
  // regras 
}
.youtube-header__search { 
  // regras 
}
.youtube-header__list { 
  // regras 
}
.youtube-header__item { 
  // regras 
}

----------------------------------------------------------------------

Dica 2:
Ou na versão Sass.
No Sass, & toma o lugar do nome dos pais.

.youtube-header { 
  // rules 
  & __ logo { 
    // regras
  }
  & __ pesquisar { 
    // regras 
  }
  & __ list { 
    // regras 
  }
  & __ item { 
    // regras 
  } 
}

------------------------------------------------------------------------

# Modificadores representam diferentes estados ou estilos de classes. 
Eles podem ser usados ​​para blocos ou elementos.
Em HTML, um modificador deve ser usado junto com seu Bloco / Elemento, 
como recursos adicionais:

<form class="form form--large">
  <button class="form__button form__button--red"></button>
</form>


A nomenclatura de um modificador deve começar com seu nome de bloco pai, 
2 traços depois dele e terminar com seu próprio nome.

Block -- Modifier:

.form {
  // regras
  .form--large {}  // Block modifiers
  .form--small {}
}

Element -- Modifier:

.form {
  // regras
  .form__button {
    // regras
    
    .form__button--red {}  // Block__Element--Modifiers
    .form__button--green {}
   }
}



*/
